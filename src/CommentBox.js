import React, {Component, PropTypes as t} from 'react'

import CommentForm from './CommentForm'
import CommentList from './CommentList'
import {fetchJSON} from './utils'

class CommentBox extends Component {
  static propTypes = {
    pollInterval: t.number.isRequired,
    url: t.string.isRequired,
  }

  state = {
    data: [],
  }

  componentDidMount() {
    this.loadCommentsFromServer()
    setInterval(this.loadCommentsFromServer, this.props.pollInterval)
  }

  loadCommentsFromServer = async () => {
    try {
      let data = await fetchJSON(this.props.url, {cache: 'no-cache'})
      this.setState({data})
    }
    catch (e) {
      console.error(this.props.url, e)
    }
  }

  handleCommentSubmit = async (comment) => {
    let comments = this.state.data
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now()
    this.setState({data: [...comments, comment]})
    try {
      let data = await fetchJSON(this.props.url, {
        body: JSON.stringify(comment),
        headers: {
          'Content-Type': 'application/json',
        },
        method: 'POST'
      })
      this.setState({data})
    }
    catch (e) {
      this.setState({data: comments})
      console.error(this.props.url, e)
    }
  }

  render() {
    return <div className="commentBox">
      <h1>Comments</h1>
      <CommentList data={this.state.data}/>
      <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
    </div>
  }
}

export default CommentBox
